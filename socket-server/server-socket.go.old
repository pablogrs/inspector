package socketserver

import (
	"log"
	"net"
	"os"
	"time"

	inspectorConfig "github.hpe.com/pablo-gon-sanchez/inspector-gadget/inspectorConfig"
)

// SockAddr using Unix socket
const SockAddr = "/tmp/echo.sock"

// func echoServer(c net.Conn) {
// 	log.Printf("Client connected [%s]", c.RemoteAddr().Network())
// 	io.Copy(c, c)
// 	//exec.Command("/bin/sh", c)
// 	c.Close()
// }

func sendCommands(c net.Conn) {
	//var fullCommand string

	log.Printf("Inspector config: %v \n", inspectorConfig.InspectorConfiguration)

	for _, v := range inspectorConfig.InspectorConfiguration.Commands {
		log.Printf("Commands: %v -%v \n", v.Name, v.Parameters)
		fullCommand := v.Name + " -" + v.Parameters
		_, err := c.Write([]byte(fullCommand))
		if err != nil {
			log.Fatal("Write: ", err)
		}
		time.Sleep(5 * time.Second)
	}

}

func echoServer(c net.Conn) {
	log.Printf("Client connected [%s]", c.RemoteAddr().Network())
	defer c.Close()

	for {
		buf := make([]byte, 512)
		nr, err := c.Read(buf)
		if err != nil {
			return
		}

		data := buf[0:nr]
		println("Server got:", string(data))
		time.Sleep(5 * time.Second)
	}
}

type server struct{}

func main() {
	inspectorConfig.LoadConfig()

	if err := os.RemoveAll(SockAddr); err != nil {
		log.Fatal(err)
	}

	listener, err := net.Listen("unix", SockAddr)

	if err != nil {
		log.Fatal("listen error:", err)
	}

	// load the commands to be run by the client
	// UNIX SOCKET CONNECTIONS
	for {
		// Accept new connections, dispatching them to echoServer
		// in a goroutine.
		conn, err := listener.Accept()
		if err != nil {
			log.Fatal("accept error:", err)
		}

		go echoServer(conn)
	}
}
