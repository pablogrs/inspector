// Code generated by protoc-gen-go. DO NOT EDIT.
// source: commands/commands.proto

package slavecommandspb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Command struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parameters           string   `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_3690061a1131852d, []int{0}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Command) GetParameters() string {
	if m != nil {
		return m.Parameters
	}
	return ""
}

type RunCommandRequest struct {
	CommandToRun         int32    `protobuf:"varint,1,opt,name=command_to_run,json=commandToRun,proto3" json:"command_to_run,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunCommandRequest) Reset()         { *m = RunCommandRequest{} }
func (m *RunCommandRequest) String() string { return proto.CompactTextString(m) }
func (*RunCommandRequest) ProtoMessage()    {}
func (*RunCommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3690061a1131852d, []int{1}
}

func (m *RunCommandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunCommandRequest.Unmarshal(m, b)
}
func (m *RunCommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunCommandRequest.Marshal(b, m, deterministic)
}
func (m *RunCommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunCommandRequest.Merge(m, src)
}
func (m *RunCommandRequest) XXX_Size() int {
	return xxx_messageInfo_RunCommandRequest.Size(m)
}
func (m *RunCommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunCommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunCommandRequest proto.InternalMessageInfo

func (m *RunCommandRequest) GetCommandToRun() int32 {
	if m != nil {
		return m.CommandToRun
	}
	return 0
}

type RunCommandResponse struct {
	CommandResponse      string   `protobuf:"bytes,1,opt,name=command_response,json=commandResponse,proto3" json:"command_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunCommandResponse) Reset()         { *m = RunCommandResponse{} }
func (m *RunCommandResponse) String() string { return proto.CompactTextString(m) }
func (*RunCommandResponse) ProtoMessage()    {}
func (*RunCommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3690061a1131852d, []int{2}
}

func (m *RunCommandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunCommandResponse.Unmarshal(m, b)
}
func (m *RunCommandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunCommandResponse.Marshal(b, m, deterministic)
}
func (m *RunCommandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunCommandResponse.Merge(m, src)
}
func (m *RunCommandResponse) XXX_Size() int {
	return xxx_messageInfo_RunCommandResponse.Size(m)
}
func (m *RunCommandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunCommandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunCommandResponse proto.InternalMessageInfo

func (m *RunCommandResponse) GetCommandResponse() string {
	if m != nil {
		return m.CommandResponse
	}
	return ""
}

func init() {
	proto.RegisterType((*Command)(nil), "slavecommands.Command")
	proto.RegisterType((*RunCommandRequest)(nil), "slavecommands.RunCommandRequest")
	proto.RegisterType((*RunCommandResponse)(nil), "slavecommands.RunCommandResponse")
}

func init() { proto.RegisterFile("commands/commands.proto", fileDescriptor_3690061a1131852d) }

var fileDescriptor_3690061a1131852d = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0xce, 0xcf, 0xcd,
	0x4d, 0xcc, 0x4b, 0x29, 0xd6, 0x87, 0x31, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x78, 0x8b,
	0x73, 0x12, 0xcb, 0x52, 0x61, 0x82, 0x4a, 0xb6, 0x5c, 0xec, 0xce, 0x10, 0xb6, 0x90, 0x10, 0x17,
	0x4b, 0x5e, 0x62, 0x6e, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x98, 0x2d, 0x24, 0xc7,
	0xc5, 0x55, 0x90, 0x58, 0x94, 0x98, 0x9b, 0x5a, 0x92, 0x5a, 0x54, 0x2c, 0xc1, 0x04, 0x96, 0x41,
	0x12, 0x51, 0xb2, 0xe4, 0x12, 0x0c, 0x2a, 0xcd, 0x83, 0x9a, 0x10, 0x94, 0x5a, 0x58, 0x9a, 0x5a,
	0x5c, 0x22, 0xa4, 0xc2, 0xc5, 0x07, 0x35, 0x3f, 0xbe, 0x24, 0x3f, 0xbe, 0xa8, 0x34, 0x0f, 0x6c,
	0x24, 0x6b, 0x10, 0x0f, 0x54, 0x34, 0x24, 0x3f, 0xa8, 0x34, 0x4f, 0xc9, 0x9e, 0x4b, 0x08, 0x59,
	0x6b, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x26, 0x97, 0x00, 0x4c, 0x6f, 0x11, 0x54, 0x0c,
	0xea, 0x20, 0xfe, 0x64, 0x54, 0xa5, 0x46, 0xe9, 0x5c, 0x7c, 0x50, 0xdd, 0xc1, 0xa9, 0x45, 0x65,
	0x99, 0xc9, 0xa9, 0x42, 0xa1, 0x5c, 0x5c, 0x08, 0x23, 0x85, 0x14, 0xf4, 0x50, 0xbc, 0xaa, 0x87,
	0xe1, 0x50, 0x29, 0x45, 0x3c, 0x2a, 0x20, 0x96, 0x28, 0x31, 0x18, 0x30, 0x3a, 0x09, 0x46, 0xf1,
	0xa3, 0xa8, 0x2b, 0x48, 0x4a, 0x62, 0x03, 0x07, 0xa6, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xb3,
	0x4b, 0x67, 0x6c, 0x67, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommandServiceClient is the client API for CommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommandServiceClient interface {
	RunCommand(ctx context.Context, in *RunCommandRequest, opts ...grpc.CallOption) (CommandService_RunCommandClient, error)
}

type commandServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommandServiceClient(cc *grpc.ClientConn) CommandServiceClient {
	return &commandServiceClient{cc}
}

func (c *commandServiceClient) RunCommand(ctx context.Context, in *RunCommandRequest, opts ...grpc.CallOption) (CommandService_RunCommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommandService_serviceDesc.Streams[0], "/slavecommands.CommandService/RunCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandServiceRunCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommandService_RunCommandClient interface {
	Recv() (*RunCommandResponse, error)
	grpc.ClientStream
}

type commandServiceRunCommandClient struct {
	grpc.ClientStream
}

func (x *commandServiceRunCommandClient) Recv() (*RunCommandResponse, error) {
	m := new(RunCommandResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommandServiceServer is the server API for CommandService service.
type CommandServiceServer interface {
	RunCommand(*RunCommandRequest, CommandService_RunCommandServer) error
}

// UnimplementedCommandServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCommandServiceServer struct {
}

func (*UnimplementedCommandServiceServer) RunCommand(req *RunCommandRequest, srv CommandService_RunCommandServer) error {
	return status.Errorf(codes.Unimplemented, "method RunCommand not implemented")
}

func RegisterCommandServiceServer(s *grpc.Server, srv CommandServiceServer) {
	s.RegisterService(&_CommandService_serviceDesc, srv)
}

func _CommandService_RunCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunCommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandServiceServer).RunCommand(m, &commandServiceRunCommandServer{stream})
}

type CommandService_RunCommandServer interface {
	Send(*RunCommandResponse) error
	grpc.ServerStream
}

type commandServiceRunCommandServer struct {
	grpc.ServerStream
}

func (x *commandServiceRunCommandServer) Send(m *RunCommandResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CommandService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slavecommands.CommandService",
	HandlerType: (*CommandServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunCommand",
			Handler:       _CommandService_RunCommand_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "commands/commands.proto",
}
